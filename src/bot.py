import asyncio
import os
from aiogram import Bot, Dispatcher
from aiogram.dispatcher.router import Router
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from aiogram.filters import CommandStart
from utils import database_manager, keyboard_buttons, user_class
import utils.fsm as fsm

BOT_API_TOKEN = os.getenv("bot_token")

# Bot
bot = Bot(token=BOT_API_TOKEN)
dispatcher = Dispatcher()

# Routers
router = Router()

# Add routers in dispatcher
dispatcher.include_router(router)

# Database
db = database_manager.Database()

# Users dict
users = {}


@router.message(CommandStart())
async def command_start_handler(message: Message, state: FSMContext) -> None:
    user_id = message.from_user.id

    try:
        is_registered = await db.check_registration(user_id)
        if is_registered:
            try:
                full_name, gender, reminders_number, notes_number = await db.get_user_data(user_id)

                users[user_id] = user_class.User(user_id, full_name, gender)

                # Change state for menu
                await state.set_state(fsm.MenuState.waiting_for_choice)

                # Greeting
                if full_name:
                    await message.answer(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {full_name}!",
                                         reply_markup=keyboard_buttons.menu_keyboard)
                else:
                    await message.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ", reply_markup=keyboard_buttons.menu_keyboard)
            except Exception:
                await message.answer("–Ø –Ω–µ –º–æ–≥—É —Å–µ–π—á–∞—Å –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
        else:
            await message.answer(
                "–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –∑–¥–æ—Ä–æ–≤—å—é. –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–ª–µ–¥–∏—Ç—å –∑–∞ –≤–∞—à–∏–º –∑–¥–æ—Ä–æ–≤—å–µ–º, –ø–æ–∫–∞ –≤—ã "
                "–∑–∞–Ω–∏–º–∞–µ—Ç–µ—Å—å —Å–≤–æ–∏–º–∏ –¥–µ–ª–∞–º–∏")

            # Pause between messages
            await asyncio.sleep(5)
            await message.answer("–í–∏–∂—É –≤—ã –∑–¥–µ—Å—å –≤ –ø–µ—Ä–≤—ã–π —Ä–∞–∑. –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —è "
                                 "—Å—Ç–∞–ª –≤–∞—à–∏–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ "
                                 "–≤–æ–ø—Ä–æ—Å")

            await state.set_state(fsm.RegistrationState.waiting_for_anonymity)
            await message.answer("–í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞—Ç—å—Å—è –∞–Ω–æ–Ω–∏–º–Ω—ã–º?", reply_markup=keyboard_buttons.anonim_keyboard)
    except Exception:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–∞—à–µ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")


@router.callback_query(fsm.RegistrationState.waiting_for_anonymity)
async def anonymity_callback_query_handler(callback_query, state: FSMContext) -> None:
    user_id = callback_query.from_user.id

    # Create user and add in users
    users[user_id] = user_class.User(user_id)

    user_anonymity_choice = callback_query.data
    if user_anonymity_choice == "Anonim":
        await callback_query.message.edit_text("–•–æ—Ä–æ—à–æ. –í–∞—à –≤—ã–±–æ—Ä –±—É–¥–µ—Ç —É—á—Ç–µ–Ω")

        # Add user in database
        is_registered = await db.registration(user_id)

        if is_registered:
            await callback_query.message.answer("–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã üòÄ", reply_markup=keyboard_buttons.menu_keyboard)
            await state.set_state(fsm.MenuState.waiting_for_choice)
        else:
            await callback_query.message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å üôÅ")
            await callback_query.message.answer("–í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞—Ç—å—Å—è –∞–Ω–æ–Ω–∏–º–Ω—ã–º?",
                                                reply_markup=keyboard_buttons.anonim_keyboard)
    elif user_anonymity_choice == "Not anonim":
        await callback_query.message.delete()

        # Pause between messages
        await asyncio.sleep(1)
        await callback_query.message.answer("–ß—Ç–æ–±—ã —è –∑–Ω–∞–ª, –∫–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –∏–º—è. –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å "
                                            "–ø—Å–µ–≤–¥–æ–Ω–∏–º, –§–ò–û –∏–ª–∏ –≤—Å–µ, —á—Ç–æ –≤–∞–º —É–≥–æ–¥–Ω–æ, –Ω–æ –Ω–µ –¥–ª–∏–Ω–Ω–µ–µ 200 —Å–∏–º–≤–æ–ª–æ–≤")
        await state.set_state(fsm.RegistrationState.waiting_for_full_name)


@router.message(fsm.RegistrationState.waiting_for_full_name)
async def full_name_handler(message: Message, state: FSMContext) -> None:
    user_full_name = message.text.strip()

    # Checking that user enters name less than 100 symbols
    if len(user_full_name) > 200:
        await message.answer("–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 200 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è, —á—Ç–æ–±—ã —è –∑–Ω–∞–ª, "
                             "–∫–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è")
        return

    user_id = message.from_user.id

    user = users[user_id]
    user.full_name = user_full_name

    await message.answer(f"–í–∞—à–µ –∏–º—è: {user_full_name}")

    await state.set_state(fsm.RegistrationState.waiting_for_gender)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª", reply_markup=keyboard_buttons.gender_keyboard)


@router.callback_query(fsm.RegistrationState.waiting_for_gender)
async def gender_callback_query_handler(callback_query, state: FSMContext) -> None:
    user_id = callback_query.from_user.id
    user_gender = callback_query.data

    # Set user gender
    user = users[user_id]
    user.gender = user_gender

    await callback_query.message.edit_text("–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–ª")

    user_full_name = user.full_name
    is_registered = await db.registration(user_id, user_full_name, user_gender)

    # Pause between messages
    await asyncio.sleep(1)

    if is_registered:
        if user_gender == "Female":
            message_text = "–¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ üòÄ"
        else:
            message_text = "–¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω üòÄ"
        await callback_query.message.answer(message_text, reply_markup=keyboard_buttons.menu_keyboard)
        await state.set_state(fsm.MenuState.waiting_for_choice)

    else:
        await callback_query.message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —Å–µ–π—á–∞—Å —è –Ω–µ –º–æ–≥—É –≤–∞—Å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å üôÅ")
        await state.clear()


@router.message(fsm.RegistrationState.waiting_for_gender)
async def gender_message_handler(message: Message) -> None:
    await message.answer("–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –ø–æ–ª. –ü–æ–¥ —ç—Ç–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –Ω–∞—Ö–æ–¥—è—Ç—Å—è –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ "
                         "–≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª, –Ω–∞–∂–∞–≤ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫", reply_markup=keyboard_buttons.gender_keyboard)


@router.message(fsm.MenuState.waiting_for_choice)
async def menu_handler(message: Message, state: FSMContext) -> None:
    user_choice = message.text
    user_id = message.from_user.id

    if user_choice == "üë§–ü—Ä–æ—Ñ–∏–ª—å":
        try:
            # Get user data
            full_name, gender, reminders_number, notes_number = await db.get_user_data(user_id)

            if full_name:
                user = users[user_id]
                gender = user.translate_gender()

                message_text = f"""*–ü—Ä–æ—Ñ–∏–ª—å*
    
–¢–≤–æ–µ –∏–º—è: *{full_name}*
–¢–≤–æ–π –ø–æ–ª: *{gender}*
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–≤–æ–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: *{reminders_number}*
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–≤–æ–∏—Ö –∑–∞–º–µ—Ç–æ–∫: *{notes_number}*"""

                await state.set_state(fsm.ProfileState.waiting_for_choice)
                await message.answer(message_text, parse_mode="MarkdownV2",
                                     reply_markup=keyboard_buttons.edit_profile_keyboard)
            else:
                message_text = f"""*–ü—Ä–æ—Ñ–∏–ª—å*
    
–í–∞—à–µ –∏–º—è: *–ù–µ —É–∫–∞–∑–∞–Ω–æ* \\(–∞–Ω–æ–Ω–∏–º–Ω—ã–π\\)
–í–∞—à –ø–æ–ª: *–ù–µ —É–∫–∞–∑–∞–Ω–æ* \\(–∞–Ω–æ–Ω–∏–º–Ω—ã–π\\)
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—à–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: *{reminders_number}*
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—à–∏—Ö –∑–∞–º–µ—Ç–æ–∫: *{notes_number}*"""

                await state.set_state(fsm.AnonimProfileState.waiting_for_choice)
                await message.answer(message_text, parse_mode="MarkdownV2",
                                     reply_markup=keyboard_buttons.anonim_edit_profile_keyboard)
        except Exception:
            await state.set_state(fsm.MenuState.waiting_for_choice)
            await message.answer("–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—èüò¢", reply_markup=keyboard_buttons.menu_keyboard)

    elif user_choice == "ü´Ä–î–Ω–µ–≤–Ω–∏–∫ –¥–∞–≤–ª–µ–Ω–∏—è":
        pass
    elif user_choice == "üîî–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è":
        pass
    elif user_choice == "‚úçÔ∏è–ó–∞–º–µ—Ç–∫–∏":
        pass


@router.message(fsm.ProfileState.waiting_for_choice)
async def profile_handler(message: Message, state: FSMContext) -> None:
    user_choice = message.text
    user_id = message.from_user.id

    if user_choice == "–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è":
        await state.set_state(fsm.EditProfileState.waiting_for_full_name)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è (–Ω–µ –±–æ–ª—å—à–µ 200 —Å–∏–º–≤–æ–ª–æ–≤)")
    elif user_choice == "–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–ª":
        await state.set_state(fsm.EditProfileState.waiting_for_gender)
        await message.answer("–í—ã–±–µ—Ä–∏ –ø–æ–ª:", reply_markup=keyboard_buttons.gender_keyboard)
    elif user_choice == "–°—Ç–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–º":
        try:
            await db.anonymization(user_id)

            await state.set_state(fsm.MenuState.waiting_for_choice)
            await message.answer("–¢–µ–ø–µ—Ä—å –≤—ã –∞–Ω–æ–Ω–∏–º–Ω—ã", reply_markup=keyboard_buttons.menu_keyboard)
        except Exception:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é ‚òπÔ∏è")
    elif user_choice == "üîô–ù–∞–∑–∞–¥":
        await state.set_state(fsm.MenuState.waiting_for_choice)
        await message.answer("–ß–µ–º –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω?", reply_markup=keyboard_buttons.menu_keyboard)


@router.message(fsm.EditProfileState.waiting_for_full_name)
async def edit_full_name_handler(message: Message, state: FSMContext) -> None:
    new_user_full_name = message.text.strip()

    # Checking that user enters name less than 100 symbols
    if len(new_user_full_name) > 200:
        await message.answer("–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 200 —Å–∏–º–≤–æ–ª–æ–≤")
        return

    # Change full name
    user_id = message.from_user.id

    try:
        await db.update_user_full_name(user_id, new_user_full_name)

        user = users[user_id]
        user.full_name = new_user_full_name

        await message.answer(f"–ù–æ–≤–æ–µ –∏–º—è: {new_user_full_name}",
                             reply_markup=keyboard_buttons.edit_profile_keyboard)
        await state.set_state(fsm.ProfileState.waiting_for_choice)
    except Exception:
        await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤–æ–µ –∏–º—è üôÅ",
                             reply_markup=keyboard_buttons.edit_profile_keyboard)
        await state.set_state(fsm.ProfileState.waiting_for_choice)


@router.callback_query(fsm.EditProfileState.waiting_for_gender)
async def edit_gender_callback_query_handler(callback_query, state: FSMContext) -> None:
    await callback_query.message.delete()

    user_id = callback_query.from_user.id
    new_user_gender = callback_query.data

    # Change gender
    try:
        await db.update_gender(user_id, new_user_gender)

        user = users[user_id]
        user.gender = new_user_gender

        await callback_query.message.answer(f"–ü–æ–ª –∏–∑–º–µ–Ω–µ–Ω", reply_markup=keyboard_buttons.edit_profile_keyboard)
        await state.set_state(fsm.ProfileState.waiting_for_choice)
    except Exception:
        await callback_query.message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è üôÅ",
                                            reply_markup=keyboard_buttons.edit_profile_keyboard)
        await state.set_state(fsm.ProfileState.waiting_for_choice)


@router.message(fsm.AnonimProfileState.waiting_for_choice)
async def anon_profile_handler(message: Message, state: FSMContext) -> None:
    user_choice = message.text
    user_id = message.from_user.id

    if user_choice == "–î–µ–∞–Ω–æ–Ω–∏–º–∏–∑–∞—Ü–∏—è":
        await state.set_state(fsm.DeanonymizationState.waiting_for_name)

        await message.answer("–ß—Ç–æ–±—ã —è –∑–Ω–∞–ª, –∫–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –∏–º—è. –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Å–µ–≤–¥–æ–Ω–∏–º, "
                             "–§–ò–û –∏–ª–∏ –≤—Å–µ, —á—Ç–æ –≤–∞–º —É–≥–æ–¥–Ω–æ, –Ω–æ –Ω–µ –¥–ª–∏–Ω–Ω–µ–µ 200 —Å–∏–º–≤–æ–ª–æ–≤")
    elif user_choice == "üîô–ù–∞–∑–∞–¥":
        await state.set_state(fsm.MenuState.waiting_for_choice)
        await message.answer("–ß–µ–º –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω?", reply_markup=keyboard_buttons.menu_keyboard)


@router.message(fsm.DeanonymizationState.waiting_for_name)
async def deanonymization_handler(message: Message, state: FSMContext) -> None:
    user_full_name = message.text.strip()

    # Checking that user enters name less than 100 symbols
    if len(user_full_name) > 200:
        await message.answer("–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 200 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è, —á—Ç–æ–±—ã —è –∑–Ω–∞–ª, "
                             "–∫–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è")
        return

    # User deanonymization
    user_id = message.from_user.id

    try:
        await db.deanonymization(user_id, user_full_name)

        # Change user in users
        user = users[user_id]
        user.full_name = user_full_name
        user.gender = "Do not specify"

        await message.answer(f"–¢–≤–æ–µ –∏–º—è: {user_full_name}",
                             reply_markup=keyboard_buttons.edit_profile_keyboard)
        await state.set_state(fsm.ProfileState.waiting_for_choice)
    except Exception:
        await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ üôÅ",
                             reply_markup=keyboard_buttons.anonim_edit_profile_keyboard)
        await state.set_state(fsm.AnonimProfileState.waiting_for_choice)



# @dispatcher.message()
# async def test(message: Message) -> None:
#     chat = message.chat
#     username = chat.username
#     first_name = chat.first_name
#     last_name = chat.last_name
#     full_name = chat.full_name
#
#     user = message.from_user
#     user_id = user.id
#
#     await message.answer(f"{username}, {first_name}, {last_name}, {full_name}")
#     await message.answer(f"{user_id}")
#     await message.answer("Hello, " + "d" * 200)


async def start():
    """Start bot"""
    try:
        await db.init_pool()
        await bot.delete_webhook(True)
        await dispatcher.start_polling(bot)
    finally:
        await db.close_connections()

asyncio.run(start())
