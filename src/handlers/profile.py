from aiogram.fsm.context import FSMContext
from aiogram.types import Message

from src.fsm import EditProfileState, MenuState, ProfileState
from src.keyboard_buttons.gender_kb_btns import gender_kb
from src.keyboard_buttons.menu_kb_btns import menu_kb
from src.models.database_manager import db
from src.models.user_class import User
from src.my_routers import router


@router.message(ProfileState.waiting_for_choice)
async def profile_handler(message: Message, state: FSMContext) -> None:
    user_choice = message.text
    user_id = message.from_user.id

    if user_choice == "–ò–∑–º–µ–Ω–∏ –∏–º—è":
        await state.set_state(EditProfileState.waiting_for_full_name)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è (–Ω–µ –±–æ–ª—å—à–µ 200 —Å–∏–º–≤–æ–ª–æ–≤)")
    elif user_choice == "–ò–∑–º–µ–Ω–∏ –ø–æ–ª":
        await state.set_state(EditProfileState.waiting_for_gender)
        await message.answer("–í—ã–±–µ—Ä–∏ –ø–æ–ª:", reply_markup=gender_kb)
    elif user_choice == "–°–¥–µ–ª–∞–π –∞–Ω–æ–Ω–∏–º–Ω—ã–º":
        try:
            await db.anonymization(user_id)

            user = User.get_user(user_id)
            user.full_name = None
            user.gender = None

            await state.set_state(MenuState.waiting_for_choice)
            await message.answer("–¢–µ–ø–µ—Ä—å –≤—ã –∞–Ω–æ–Ω–∏–º–Ω—ã", reply_markup=menu_kb)
        except Exception:
            await message.answer("–ú–Ω–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é ‚òπÔ∏è")
    elif user_choice == "üîô–ù–∞–∑–∞–¥":
        await state.set_state(MenuState.waiting_for_choice)
        await message.answer("–ß–µ–º –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω?", reply_markup=menu_kb)
