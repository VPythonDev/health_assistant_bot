import asyncio

from aiogram.fsm.context import FSMContext
from aiogram.types import Message

from src.fsm import MenuState, RegistrationState
from src.keyboard_buttons.anonymity_kb_btns import anonymity_kb
from src.keyboard_buttons.gender_kb_btns import gender_kb
from src.keyboard_buttons.menu_kb_btns import menu_kb
from src.models.database_manager import db
from src.models.user_class import User
from src.my_routers import router


@router.callback_query(RegistrationState.waiting_for_anonymity)
async def choose_anonymity_cbq_handler(callback_query, state: FSMContext) -> None:
    user_id = callback_query.from_user.id

    # Create user
    User(user_id)

    user_anonymity_choice = callback_query.data
    if user_anonymity_choice == "Anonim":
        await callback_query.message.edit_text("–•–æ—Ä–æ—à–æ. –í–∞—à –≤—ã–±–æ—Ä –±—É–¥–µ—Ç —É—á—Ç–µ–Ω")

        # Add user in database
        is_registered = await db.registration(user_id)

        if is_registered:
            await callback_query.message.answer("–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã üòÄ", reply_markup=menu_kb)
            await state.set_state(MenuState.waiting_for_choice)
        else:
            await callback_query.message.answer("–Ø –Ω–µ —Å–º–æ–≥ –≤–∞—Å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å ‚òπÔ∏è")
            await callback_query.message.answer("–í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞—Ç—å—Å—è –∞–Ω–æ–Ω–∏–º–Ω—ã–º?",
                                                reply_markup=anonymity_kb)
    elif user_anonymity_choice == "Not anonim":
        await callback_query.message.delete()

        # Pause between messages
        await asyncio.sleep(1)
        await callback_query.message.answer("–ß—Ç–æ–±—ã —è –∑–Ω–∞–ª, –∫–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –∏–º—è. –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å "
                                            "–ø—Å–µ–≤–¥–æ–Ω–∏–º, –§–ò–û –∏–ª–∏ –≤—Å–µ, —á—Ç–æ –≤–∞–º —É–≥–æ–¥–Ω–æ, –Ω–æ –Ω–µ –¥–ª–∏–Ω–Ω–µ–µ 200 —Å–∏–º–≤–æ–ª–æ–≤")
        await state.set_state(RegistrationState.waiting_for_full_name)


@router.message(RegistrationState.waiting_for_full_name)
async def input_full_name_msg_handler(message: Message, state: FSMContext) -> None:
    user_full_name = message.text

    # Checking that user enters name less than 200 symbols
    if len(user_full_name) > 200:
        await message.answer("–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 200 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è, —á—Ç–æ–±—ã —è –∑–Ω–∞–ª, "
                             "–∫–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è")
        return

    user_id = message.from_user.id

    user = User.get_user(user_id)
    user.full_name = user_full_name

    await message.answer(f"–í–∞—à–µ –∏–º—è: {user_full_name}")

    await state.set_state(RegistrationState.waiting_for_gender)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª", reply_markup=gender_kb)


@router.callback_query(RegistrationState.waiting_for_gender)
async def choose_gender_cbq_handler(callback_query, state: FSMContext) -> None:
    user_id = callback_query.from_user.id
    user_gender = callback_query.data

    # Set user gender
    user = User.get_user(user_id)
    user.gender = user_gender

    await callback_query.message.edit_text("–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–ª")

    user_full_name = user.full_name
    is_registered = await db.registration(user_id, user_full_name, user_gender)

    # Pause between messages
    await asyncio.sleep(1)

    if is_registered:
        if user_gender == "Female":
            message_text = "–¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ üòÄ"
        else:
            message_text = "–¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω üòÄ"
        await callback_query.message.answer(message_text, reply_markup=menu_kb)
        await state.set_state(MenuState.waiting_for_choice)

    else:
        await callback_query.message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —Å–µ–π—á–∞—Å —è –Ω–µ –º–æ–≥—É –≤–∞—Å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å üôÅ")
        await state.clear()


@router.message(RegistrationState.waiting_for_gender)
async def repeat_choose_gender_msg_handler(message: Message) -> None:
    await message.answer("–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –ø–æ–ª. –ü–æ–¥ —ç—Ç–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –Ω–∞—Ö–æ–¥—è—Ç—Å—è –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ "
                         "–≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª, –Ω–∞–∂–∞–≤ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫", reply_markup=gender_kb)
