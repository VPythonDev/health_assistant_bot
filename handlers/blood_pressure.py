from datetime import datetime

from aiogram.fsm.context import FSMContext
from aiogram.types import Message

from utils.data_processor import change_day_index, process_bp_entries
from utils.database_manager import db
from utils.fsm import (BloodPressureState, CreateBPEntryState, GenerateBPGraph,
                       MenuState)
from utils.keyboard_buttons.blood_pressure_kb_btns import (
    bp_kb, generate_bp_dates_buttons)
from utils.keyboard_buttons.cancel_kb_btns import cancel_kb
from utils.keyboard_buttons.menu_kb_btns import menu_kb
from utils.my_routers import router
from utils.user_class import User


@router.callback_query(BloodPressureState.waiting_for_choice)
async def show_bp_info_callback_query_handler(callback_query) -> None:
    user_id = callback_query.from_user.id
    user_choice = callback_query.data

    user = User.get_user(user_id)

    if user_choice == "Next":
        measurement_dates = user.measurement_dates

        index = user.current_day_index
        new_index = change_day_index(measurement_dates, index, is_previous=False)
        # Update index
        user.current_day_index = new_index

        dates_kb = generate_bp_dates_buttons(measurement_dates, new_index)

        await callback_query.message.edit_text("–î–∞—Ç—ã:", reply_markup=dates_kb)
    elif user_choice == "Previous":
        measurement_dates = user.measurement_dates

        index = user.current_day_index
        new_index = change_day_index(measurement_dates, index)
        # Update index
        user.current_day_index = new_index

        dates_kb = generate_bp_dates_buttons(measurement_dates, new_index)

        await callback_query.message.edit_text("–î–∞—Ç—ã:", reply_markup=dates_kb)
    else:
        # Covert date to date object
        user_date = datetime.strptime(user_choice, "%Y-%m-%d")

        try:
            blood_pressure_entries = await db.fetch_bp_entries_for_day(user_date, user_id)

            message_text = process_bp_entries(blood_pressure_entries)

            await callback_query.message.answer(message_text, reply_markup=bp_kb)
        except Exception:
            await callback_query.message.answer("–Ø –Ω–µ –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à–∏ –∑–∞–ø–∏—Å–∏ –∑–∞ —ç—Ç—É –¥–∞—Ç—ÉüôÅ", reply_markup=bp_kb)


@router.message(BloodPressureState.waiting_for_choice)
async def bp_message_handler(message: Message, state: FSMContext) -> None:
    user_id = message.from_user.id
    user_choice = message.text

    user = User.get_user(user_id)
    user_full_name = user.full_name

    if user_choice == "‚úçÔ∏è–°–æ–∑–¥–∞–π –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å":
        enter_word = "–í–≤–µ–¥–∏" if user_full_name else "–í–≤–µ–¥–∏—Ç–µ"

        await state.set_state(CreateBPEntryState.waiting_for_bp)
        await message.answer(f"{enter_word} –¥–∞–Ω–Ω—ã–µ –¥–∞–≤–ª–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 120 80 (—Å –ø—Ä–æ–±–µ–ª–æ–º, –∞ –Ω–µ '-')")
    elif user_choice == "üìà–°–æ–∑–¥–∞–π –≥—Ä–∞—Ñ–∏–∫":
        bp_entries_amount = await db.count_bp_entries(user_id)
        if bool(bp_entries_amount):
            specify_word = "–£–∫–∞–∂–∏" if user_full_name else "–£–∫–∞–∂–∏—Ç–µ"

            await state.set_state(GenerateBPGraph.waiting_for_period)
            await message.answer(f"""{specify_word} –∑–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ –º–Ω–µ —Å–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫
–ó–∞ –æ–¥–∏–Ω –¥–µ–Ω—å: 2025-01-01
–ó–∞ –ø–µ—Ä–∏–æ–¥: 2025-01-01 2025-12-31""", reply_markup=cancel_kb)
        else:
            await message.answer("–ß—Ç–æ–±—ã —è –º–æ–≥ —Å–¥–µ–ª–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫, –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å")
    elif user_choice == "üîô–ù–∞–∑–∞–¥":
        await state.set_state(MenuState.waiting_for_choice)
        await message.answer("–ß–µ–º –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω?", reply_markup=menu_kb)
