from utils.my_routers import router
from utils.fsm import MenuState, ProfileState, AnonimProfileState
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from utils.user_class import User
from utils.keyboard_buttons.edit_profile_kb_btns import edit_profile_kb
from utils.keyboard_buttons.anon_edit_profile_kb_btns import anonim_edit_profile_kb
from utils.keyboard_buttons.menu_kb_btns import menu_kb
from utils.database_manager import db

from utils.data_processor import process_blood_pressure_records


@router.message(MenuState.waiting_for_choice)
async def menu_handler(message: Message, state: FSMContext) -> None:
    user_choice = message.text
    user_id = message.from_user.id

    if user_choice == "üë§–ü—Ä–æ—Ñ–∏–ª—å":
        try:
            # Get user data
            full_name, gender, reminders_number, notes_number = await db.get_user_data(user_id)

            if full_name:
                user = User.get_user(user_id)
                gender = user.translate_gender()

                message_text = f"""–ü—Ä–æ—Ñ–∏–ª—å

–¢–≤–æ–µ –∏–º—è: {full_name}
–¢–≤–æ–π –ø–æ–ª: {gender}
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–≤–æ–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {reminders_number}
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–≤–æ–∏—Ö –∑–∞–º–µ—Ç–æ–∫: {notes_number}"""

                await state.set_state(ProfileState.waiting_for_choice)
                await message.answer(message_text, reply_markup=edit_profile_kb)
            else:
                message_text = f"""–ü—Ä–æ—Ñ–∏–ª—å

–í–∞—à–µ –∏–º—è: –ù–µ —É–∫–∞–∑–∞–Ω–æ (–∞–Ω–æ–Ω–∏–º–Ω—ã–π)
–í–∞—à –ø–æ–ª: –ù–µ —É–∫–∞–∑–∞–Ω–æ (–∞–Ω–æ–Ω–∏–º–Ω—ã–π)
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—à–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {reminders_number}
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—à–∏—Ö –∑–∞–º–µ—Ç–æ–∫: {notes_number}"""

                await state.set_state(AnonimProfileState.waiting_for_choice)
                await message.answer(message_text, reply_markup=anonim_edit_profile_kb)
        except Exception:
            await state.set_state(MenuState.waiting_for_choice)
            await message.answer("–ú–Ω–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—èüò¢", reply_markup=menu_kb)
    elif user_choice == "ü´Ä–î–Ω–µ–≤–Ω–∏–∫ –¥–∞–≤–ª–µ–Ω–∏—è":
        try:
            measurement_dates = await db.get_measurement_dates(user_id)

            # Last day records
            if measurement_dates:
                # Set dates in user
                user = User.get_user(user_id)
                user.measurement_dates = measurement_dates

                # Obj asyncpg.Record than data
                last_day = measurement_dates[0][0]
                blood_pressure_records = await db.get_blood_pressure_records(last_day, user_id)

                message_text = await process_blood_pressure_records(blood_pressure_records)

                await message.answer(message_text)
            else:
                await message.answer("–ó–∞–ø–∏—Å–µ–π –Ω–µ—Ç")
        except Exception:
            await state.set_state(MenuState.waiting_for_choice)
            await message.answer(f"–Ø –Ω–µ –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å –∑–∞–ø–∏—Å–∏üôÅ")
    elif user_choice == "üîî–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è":
        pass
    elif user_choice == "‚úçÔ∏è–ó–∞–º–µ—Ç–∫–∏":
        pass
