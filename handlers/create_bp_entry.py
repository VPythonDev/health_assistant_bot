from aiogram.fsm.context import FSMContext
from aiogram.types import Message

from utils.data_processor import check_float, convert_number
from utils.database_manager import db
from utils.fsm import BloodPressureState, CreateBPEntryState
from utils.keyboard_buttons.blood_pressure_kb_btns import bp_kb
from utils.keyboard_buttons.confirm_kb_btns import confirm_kb
from utils.keyboard_buttons.leave_empty_kb_btns import leave_empty_kb
from utils.my_routers import router
from utils.user_class import User


@router.message(CreateBPEntryState.waiting_for_bp)
async def get_bp_data_message_handler(message: Message, state: FSMContext) -> None:
    user_id = message.from_user.id

    user = User.get_user(user_id)
    user_full_name = user.full_name
    user_gender = user.gender

    you_word = "–¢—ã" if user_full_name else "–í—ã"

    user_bp = message.text.split()

    if len(user_bp) > 2:
        if user_full_name:
            entered_word = "–≤–≤–µ–ª–∞" if user_gender == "Female" else "–≤–≤–µ–ª"

            await message.answer(f"{you_word} {entered_word} —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –¥–∞–Ω–Ω—ã—Ö")
            return
        else:
            await message.answer(f"{you_word} –≤–≤–µ–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –¥–∞–Ω–Ω—ã—Ö")
            return
    elif len(user_bp) < 2:
        if user_full_name:
            entered_word = "–≤–≤–µ–ª–∞" if user_gender == "Female" else "–≤–≤–µ–ª"

            await message.answer(f"{you_word} {entered_word} –º–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö")
            return
        else:
            await message.answer(f"{you_word} –≤–≤–µ–ª–∏ –º–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö")
            return

    is_float, num = await check_float(*user_bp)

    if is_float:
        user_bp_for_db = [await convert_number(user_bp[0]), await convert_number(user_bp[1])]
        await state.update_data(user_bp=user_bp_for_db)

        may_word = "–º–æ–∂–µ—à—å" if user_full_name else "–º–æ–∂–µ—Ç–µ"
        await state.set_state(CreateBPEntryState.waiting_for_pulse)
        await message.answer(f"–¢–µ–ø–µ—Ä—å {may_word} —É–∫–∞–∑–∞—Ç—å –ø—É–ª—å—Å –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –µ–≥–æ –ø—É—Å—Ç—ã–º", reply_markup=leave_empty_kb)
    else:
        await message.answer(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç - {num}")


@router.message(CreateBPEntryState.waiting_for_pulse)
async def get_pulse_message_handler(message: Message, state: FSMContext) -> None:
    user_id = message.from_user.id

    user = User.get_user(user_id)
    user_full_name = user.full_name

    you_word = "—Ç—ã" if user_full_name else "–≤—ã"
    want_word = "—Ö–æ—á–µ—à—å" if user_full_name else "—Ö–æ—Ç–∏—Ç–µ"

    user_pulse = message.text

    if user_pulse == "–û—Å—Ç–∞–≤—å –ø—É—Å—Ç—ã–º":
        await state.update_data(user_pulse=None)

        await state.set_state(CreateBPEntryState.waiting_for_remark)
        await message.answer(f"""–•–æ—Ä–æ—à–æ, –º–æ–∂–µ—Ç {you_word} {want_word} –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–º–µ—á–∞–Ω–∏—è 
(–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–≤–æ–µ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ)? –ù–µ –±–æ–ª–µ–µ 300 —Å–∏–º–≤–æ–ª–æ–≤""", reply_markup=leave_empty_kb)
    else:
        if len(user_pulse.split()) > 1:
            user_gender = user.gender
            if user_full_name:
                entered_word = "–≤–≤–µ–ª–∞" if user_gender == "Female" else "–≤–≤–µ–ª"

                await message.answer(f"{you_word} {entered_word} —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –¥–∞–Ω–Ω—ã—Ö")
                return
            else:
                await message.answer(f"{you_word} –≤–≤–µ–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –¥–∞–Ω–Ω—ã—Ö")
                return

        is_float, num = await check_float(user_pulse)

        if is_float:
            user_pulse_for_db = await convert_number(user_pulse)
            await state.update_data(user_pulse=user_pulse_for_db)

            await state.set_state(CreateBPEntryState.waiting_for_remark)
            await message.answer(f"""–ó–∞–ø–∏—Å–∞–ª, –º–æ–∂–µ—Ç {you_word} {want_word} –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–º–µ—á–∞–Ω–∏—è 
(–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–≤–æ–µ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ)? –ù–µ –±–æ–ª–µ–µ 300 —Å–∏–º–≤–æ–ª–æ–≤""", reply_markup=leave_empty_kb)
        else:
            await message.answer(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç - {num}")


@router.message(CreateBPEntryState.waiting_for_remark)
async def get_remark_message_handler(message: Message, state: FSMContext) -> None:
    user_id = message.from_user.id

    user = User.get_user(user_id)
    user_full_name = user.full_name

    user_remark = message.text

    if len(user_remark) > 300:
        await message.answer("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ. –ù—É–∂–Ω–æ –Ω–µ –±–æ–ª—å—à–µ 300 —Å–∏–º–≤–æ–ª–æ–≤")
        return

    user_remark_for_db = user_remark if user_remark != "–û—Å—Ç–∞–≤—å –ø—É—Å—Ç—ã–º" else None

    await state.update_data(user_remark=user_remark_for_db)

    bp_data = await state.get_data()

    user_bp = bp_data.get("user_bp")
    user_systolic_pressure = user_bp[0]
    user_diastolic_pressure = user_bp[1]
    user_pulse = bp_data.get("user_pulse")

    confirm_word = "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏" if user_full_name else "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ"
    message_text = f"""{confirm_word} ‚úÖ/‚ùå
–í–µ—Ä—Ö–Ω–µ–µ (—Å–∏—Å—Ç–æ–ª–∏—á–µ—Å–∫–æ–µ): {user_systolic_pressure}
–ù–∏–∂–Ω–µ–µ (–¥–∏–∞—Å—Ç–æ–ª–∏—á–µ—Å–∫–æ–µ): {user_diastolic_pressure}
–ü—É–ª—å—Å: {user_pulse or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}
–ó–∞–º–µ—á–∞–Ω–∏—è: {user_remark_for_db or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}\n"""

    await state.set_state(CreateBPEntryState.waiting_for_confirmation)
    await message.answer(message_text, reply_markup=confirm_kb)


@router.message(CreateBPEntryState.waiting_for_confirmation)
async def bp_confirmation_message_handler(message: Message, state: FSMContext) -> None:
    user_id = message.from_user.id
    user_confirm = message.text

    if user_confirm == "–ù–µ—Ç‚ùå":
        await state.clear()

        await state.set_state(BloodPressureState.waiting_for_choice)
        await message.answer("–í —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ —è –Ω–µ –±—É–¥—É —ç—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å", reply_markup=bp_kb)
    elif user_confirm == "–î–∞‚úÖ":
        try:
            bp_data = await state.get_data()

            systolic_pressure = bp_data.get("user_bp")[0]
            diastolic_pressure = bp_data.get("user_bp")[1]
            pulse = bp_data.get("user_pulse")
            remark = bp_data.get("user_remark")

            await db.create_bp_entry(user_id, systolic_pressure, diastolic_pressure, pulse, remark)

            await state.clear()

            await state.set_state(BloodPressureState.waiting_for_choice)
            await message.answer("–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ üòÉ", reply_markup=bp_kb)
        except Exception:
            await state.set_state(BloodPressureState.waiting_for_choice)

            user = User.get_user(user_id)
            user_full_name = user.full_name

            your_word = "–¢–≤–æ–∏" if user_full_name else "–í–∞—à–∏"
            await message.answer(f"–ú–Ω–µ –æ—á–µ–Ω—å –∂–∞–ª—å, –Ω–æ —è –Ω–µ —Å–º–æ–≥ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å {your_word} –¥–∞–Ω–Ω—ã–µüò•", reply_markup=bp_kb)
